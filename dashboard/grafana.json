{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<script type=\"text/javascript\" language=\"javascript\">\nfunction UserAction(commandNumber)\n{\n// Perform the POST request\nfetch('http://localhost:8000/send_command', {\n  method: 'POST',               // Specify the request method\n  headers: {\n    'Content-Type': 'application/json'  // Inform the server that you're sending JSON\n  },\n  body: JSON.stringify({command: commandNumber })   // Convert the data to a JSON string\n})\n.then(response => {\n  if (!response.ok) {\n    throw new Error('Network response was not ok ' + response.statusText);\n  }\n  return response.json();  // Parse the JSON response\n})\n.then(result => {\n  console.log('Success:', result);\n})\n.catch(error => {\n  console.error('Error:', error);\n});\n}\n</script>\n<button type=\"submit\" onclick=\"UserAction(0)\">Turn off LED</button>\n<button type=\"submit\" onclick=\"UserAction(1)\">Turn on LED</button>\n<button type=\"submit\" onclick=\"UserAction(2)\"></button>\n<button type=\"submit\" onclick=\"UserAction(3)\"></button>\n<button type=\"submit\" onclick=\"UserAction(4)\"></button>\n<button type=\"submit\" onclick=\"UserAction(5)\"></button>\n<button type=\"submit\" onclick=\"UserAction(6)\"></button>\n<button type=\"submit\" onclick=\"UserAction(7)\"></button>\n<button type=\"submit\" onclick=\"UserAction(8)\"></button>",
        "mode": "html"
      },
      "pluginVersion": "11.2.0",
      "title": "Panel Title",
      "type": "text"
    },
    {
      "datasource": {
        "default": false,
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 90,
          "min": -90,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "green",
                "value": -5
              },
              {
                "color": "green",
                "value": 5
              },
              {
                "color": "red",
                "value": 5
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "11.2.0",
      "targets": [
        {
          "channel": "stream/self_balancing_robot/robot",
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "filter": {
            "fields": [
              "time",
              "pitch"
            ]
          },
          "queryType": "measurements",
          "refId": "A"
        }
      ],
      "title": "Pitch Angle",
      "type": "gauge"
    },
    {
      "datasource": {
        "default": false,
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 1,
      "maxDataPoints": 2000,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "channel": "stream/self_balancing_robot/robot",
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "filter": {
            "fields": [
              "time",
              "encoder_A",
              "encoder_B"
            ]
          },
          "queryType": "measurements",
          "refId": "A"
        }
      ],
      "title": "Encoder Values",
      "type": "timeseries"
    }
  ],
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-1m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Self Balancing Robot",
  "uid": "de7x5g6lang8wc",
  "version": 15,
  "weekStart": ""
}